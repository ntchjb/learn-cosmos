// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: learncosmos/gold.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GoldPool struct {
	Amount       uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	PricePerUnit uint64 `protobuf:"varint,3,opt,name=price_per_unit,json=pricePerUnit,proto3" json:"price_per_unit,omitempty"`
}

func (m *GoldPool) Reset()         { *m = GoldPool{} }
func (m *GoldPool) String() string { return proto.CompactTextString(m) }
func (*GoldPool) ProtoMessage()    {}
func (*GoldPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_e30836582ee131cc, []int{0}
}
func (m *GoldPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoldPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoldPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoldPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoldPool.Merge(m, src)
}
func (m *GoldPool) XXX_Size() int {
	return m.Size()
}
func (m *GoldPool) XXX_DiscardUnknown() {
	xxx_messageInfo_GoldPool.DiscardUnknown(m)
}

var xxx_messageInfo_GoldPool proto.InternalMessageInfo

func (m *GoldPool) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *GoldPool) GetPricePerUnit() uint64 {
	if m != nil {
		return m.PricePerUnit
	}
	return 0
}

type OwnedGold struct {
	Owner  string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *OwnedGold) Reset()         { *m = OwnedGold{} }
func (m *OwnedGold) String() string { return proto.CompactTextString(m) }
func (*OwnedGold) ProtoMessage()    {}
func (*OwnedGold) Descriptor() ([]byte, []int) {
	return fileDescriptor_e30836582ee131cc, []int{1}
}
func (m *OwnedGold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnedGold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnedGold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnedGold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnedGold.Merge(m, src)
}
func (m *OwnedGold) XXX_Size() int {
	return m.Size()
}
func (m *OwnedGold) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnedGold.DiscardUnknown(m)
}

var xxx_messageInfo_OwnedGold proto.InternalMessageInfo

func (m *OwnedGold) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *OwnedGold) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*GoldPool)(nil), "ntchjb.learncosmos.learncosmos.GoldPool")
	proto.RegisterType((*OwnedGold)(nil), "ntchjb.learncosmos.learncosmos.OwnedGold")
}

func init() { proto.RegisterFile("learncosmos/gold.proto", fileDescriptor_e30836582ee131cc) }

var fileDescriptor_e30836582ee131cc = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcb, 0x49, 0x4d, 0x2c,
	0xca, 0x4b, 0xce, 0x2f, 0xce, 0xcd, 0x2f, 0xd6, 0x4f, 0xcf, 0xcf, 0x49, 0xd1, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x92, 0xcb, 0x2b, 0x49, 0xce, 0xc8, 0x4a, 0xd2, 0x43, 0x92, 0x46, 0x66, 0x2b,
	0x79, 0x70, 0x71, 0xb8, 0xe7, 0xe7, 0xa4, 0x04, 0xe4, 0xe7, 0xe7, 0x08, 0x89, 0x71, 0xb1, 0x25,
	0xe6, 0xe6, 0x97, 0xe6, 0x95, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x04, 0x41, 0x79, 0x42, 0x2a,
	0x5c, 0x7c, 0x05, 0x45, 0x99, 0xc9, 0xa9, 0xf1, 0x05, 0xa9, 0x45, 0xf1, 0xa5, 0x79, 0x99, 0x25,
	0x12, 0xcc, 0x60, 0x79, 0x1e, 0xb0, 0x68, 0x40, 0x6a, 0x51, 0x68, 0x5e, 0x66, 0x89, 0x92, 0x25,
	0x17, 0xa7, 0x7f, 0x79, 0x5e, 0x6a, 0x0a, 0xc8, 0x38, 0x21, 0x11, 0x2e, 0xd6, 0xfc, 0xf2, 0xbc,
	0xd4, 0x22, 0xb0, 0x49, 0x9c, 0x41, 0x10, 0x0e, 0x92, 0x05, 0x4c, 0xc8, 0x16, 0x38, 0xf9, 0x9c,
	0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31,
	0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x51, 0x7a, 0x66, 0x49, 0x46, 0x69,
	0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0xc4, 0x27, 0xfa, 0x60, 0xd7, 0xeb, 0x42, 0x7d, 0x5a, 0xa1,
	0x8f, 0xec, 0xef, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0xcf, 0x8d, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x7f, 0xe1, 0x52, 0x6c, 0x13, 0x01, 0x00, 0x00,
}

func (m *GoldPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoldPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoldPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PricePerUnit != 0 {
		i = encodeVarintGold(dAtA, i, uint64(m.PricePerUnit))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != 0 {
		i = encodeVarintGold(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OwnedGold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnedGold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnedGold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintGold(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintGold(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGold(dAtA []byte, offset int, v uint64) int {
	offset -= sovGold(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GoldPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovGold(uint64(m.Amount))
	}
	if m.PricePerUnit != 0 {
		n += 1 + sovGold(uint64(m.PricePerUnit))
	}
	return n
}

func (m *OwnedGold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovGold(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovGold(uint64(m.Amount))
	}
	return n
}

func sovGold(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGold(x uint64) (n int) {
	return sovGold(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GoldPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGold
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoldPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoldPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricePerUnit", wireType)
			}
			m.PricePerUnit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PricePerUnit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGold(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGold
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnedGold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGold
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnedGold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnedGold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGold
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGold
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGold(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGold
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGold(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGold
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGold
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGold
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGold
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGold
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGold
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGold        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGold          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGold = fmt.Errorf("proto: unexpected end of group")
)
